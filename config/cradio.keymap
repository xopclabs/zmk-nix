// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "keymap_ru.h"

#define ENG 0
#define RU 1
#define SYMB 2
#define NUM 3
#define FUNC 4
#define LANGCH 5
#define OPTS 6

#define LANG_SW LA(LSHIFT)
#define LANG_ENG F13
#define LANG_RU F14


/ {
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <175>;
            bindings = <&kp>, <&kp>;
        };
        lt: layer_tap {
            compatible = "zmk,behavior-hold-tap";
            flavor = "tap-preferred";
            tapping-term-ms = <175>;
        };
        sk: sticky_key {
            compatible = "zmk,behavior-sticky-key";
            release-after-ms = <500>;
            quick-release;
        };
        sl: sticky_layer {
            compatible = "zmk,behavior-sticky-key";
            release-after-ms = <500>;
        };     
        ru_ss_hs: ru_ss_hs {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp RU_SS>, <&kp RU_HS>;
        };
        ru_b_jo: ru_b_jo {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp RU_B>, <&kp RU_JO>;
        };
        ru_sh_sch: ru_sh_sch {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp RU_SH>, <&kp RU_SCH>;
        };
        bt_reset: bt_reset {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&none>, <&bt BT_CLR>;
        };
        bt_sel0: bt_sel0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&none>, <&bt BT_SEL 0>;
        };
        ls: lang_switch {
            compatible = "zmk,behavior-lang-switch";
            #binding-cells = <1>;
            bindings = <&kp LANG_SW>;
            layers = <ENG RU>;
        };
        ls_: lang_switch_no_layer {
            compatible = "zmk,behavior-lang-switch";
            #binding-cells = <1>;
            bindings = <&kp LANG_SW>;
            layers = <ENG RU>;
            no-layer-switch;
        };
        kp_en: kp_on_eng {
            compatible = "zmk,behavior-kp-on-lang";
            #binding-cells = <1>;
            bindings = <&ls_ ENG>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <NUM FUNC>;
            then-layer = <OPTS>;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <40>;
            key-positions = <11 12>;
            require-prior-idle-ms = <50>;
            bindings = <&kp ESC>;
        };
        combo_tab {
            timeout-ms = <40>;
            key-positions = <12 13>;
            require-prior-idle-ms = <50>;
            bindings = <&kp TAB>;
        };
        combo_enter {
            timeout-ms = <40>;
            key-positions = <16 17>;
            require-prior-idle-ms = <50>;
            bindings = <&kp ENTER>;
        };
        combo_bspcword {
            timeout-ms = <40>;
            key-positions = <6 7>;
            require-prior-idle-ms = <50>;
            bindings = <&kp LC(BSPC)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        eng_layer {
            bindings = <
            &kp Q      &kp W      &kp F      &kp P      &kp B          &kp J      &kp L      &kp U      &kp Y      &kp SEMI
            &kp A      &kp R      &kp S      &kp T      &kp G          &kp M      &kp N      &kp E      &kp I      &kp O
            &kp Z      &kp X      &kp C      &kp D      &kp V          &kp K      &kp H      &kp COMMA  &kp DOT    &kp FSLH
                                       &lt SYMB SPACE   &sl FUNC      &lt NUM ESC  &ht LSHIFT BSPC
            >;
        };

        ru_layer {
            bindings = <
            &kp RU_F   &kp RU_YA  &ru_ss_hs  &kp RU_P   &ru_b_jo     &kp RU_H  &kp RU_L  &kp RU_Y    &kp RU_JI  &kp RU_ZH
            &kp RU_A   &kp RU_R   &kp RU_S   &kp RU_T   &kp RU_G     &kp RU_M  &kp RU_N  &kp RU_E    &kp RU_I   &kp RU_O
            &kp RU_CH  &kp RU_C   &kp RU_K   &kp RU_D   &kp RU_YI    &kp RU_Z  &kp RU_V  &ru_sh_sch  &kp RU_YU  &kp RU_IE
                                       &lt SYMB SPACE   &sl FUNC     &lt NUM ESC  &ht LSHIFT BSPC
            >;
        };

        symb_layer {
            bindings = <
            &kp_en TILDE  &kp_en AT    &kp_en PRCNT  &kp_en EXCL   &kp_en HASH      &kp_en SLASH  &kp_en QMARK  &kp_en LT     &kp_en GT    &kp_en BSLH
            &kp_en SQT    &kp_en LBKT  &kp_en RBKT   &kp_en EQUAL  &kp_en PLUS      &kp_en STAR   &kp_en UNDER  &kp_en LPAR   &kp_en RPAR  &kp_en MINUS
            &kp_en COLON  &kp_en SEMI  &kp_en DQT    &kp_en CARET  &kp_en DLLR      &kp_en LBRC   &kp_en RBRC   &kp_en GRAVE  &kp_en AMPS  &kp_en PIPE
                                            &kp SPACE  &kp BSPC    &kp_en PERIOD    &kp_en COMMA
            >;
        };
        num_layer {
            bindings = <
            &none      &none      &none      &none      &none          &none      &none      &none      &none      &none
            &kp N7     &kp N5     &kp N3     &kp N1     &kp N9         &kp N8     &kp N0     &kp N2     &kp N4     &kp N6
            &none      &none      &none      &none      &none          &none      &none      &none      &none      &none
                                             &none      &sl FUNC       &none      &none
            >;
        };

        func_layer {
            bindings = <
            &kp F1      &kp F2        &kp F3      &kp F4      &kp F5            &kp F6     &kp F7        &kp F8      &kp F9     &kp F10
            &sk LGUI    &sk LALT      &sk LSHIFT  &sk LCTRL   &kp C_VOL_UP      &kp PSCRN  &kp LEFT      &kp DOWN    &kp UP     &kp RIGHT
            &bt_reset   &bt_sel0      &none       &kp DEL     &kp C_VOL_DN      &none      &sl LANGCH    &none       &kp F11    &kp F12
                                                  &none       &none             &lt NUM ESC   &none
            >;
        };

        lang_layer {
            bindings = <
            &kp LANG_SW  &none      &none      &none      &none          &none      &none      &none      &none      &none
            &none        &none      &ls RU     &ls ENG    &none          &none      &none      &none      &none      &none
            &none        &none      &none      &none      &none          &none      &none      &none      &none      &none
                                               &none      &none          &none      &none
            >;
        };

        opts_layer {
            bindings = <
            &none           &none       &none  &sys_reset  &bootloader  &bootloader  &sys_reset    &none         &none         &none
            &bt BT_CLR_ALL  &none       &none  &none       &none        &none        &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3
            &none           &bt BT_CLR  &none  &none       &none        &none        &none         &none         &none         &none
                                               &none       &none        &none        &none
            >;
        };

    };
};
